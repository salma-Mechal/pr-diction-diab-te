import streamlit as st
import pandas as pd
import joblib
import sqlite3
from datetime import datetime
import logging
from typing import Optional, Tuple, Dict, Any
import plotly.express as px
import plotly.graph_objects as go
import base64
import os
from PIL import Image
import time
import numpy as np
import random


# ============================================
# CONFIGURATION INITIALE
# ============================================

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    filename='app.log'
)
logger = logging.getLogger(__name__)

# Chemin de l'ic√¥ne
ICON_PATH = "assets/page.jpg"

# Configuration de la page Streamlit
try:
    icon = Image.open(ICON_PATH)
    st.set_page_config(
        page_title="Prediction Diabete",
        page_icon=icon,
        layout="wide",
        initial_sidebar_state="expanded"
    )
except Exception as e:
    logger.warning(f"Impossible de charger l'ic√¥ne : {e}")
    st.set_page_config(
        page_title="Prediction Diabete",
        page_icon="ü©∫",
        layout="wide",
        initial_sidebar_state="expanded"
    )

# ============================================
# FONCTIONS UTILITAIRES
# ============================================

def convert_data_types(df: pd.DataFrame) -> pd.DataFrame:
    """
    Convertit les types de donn√©es dans le DataFrame pour assurer la compatibilit√© avec le mod√®le.
    
    Args:
        df: DataFrame contenant les donn√©es √† convertir
        
    Returns:
        DataFrame avec les types convertis
    """
    # Cr√©er une copie pour √©viter les modifications sur l'original
    df = df.copy()
    
    # Dictionnaire des conversions de type
    type_conversions = {
        'Age': 'int64',
        'Pregnancies': 'int64',
        'BMI': 'float64',
        'Glucose': 'int64',
        'BloodPressure': 'int64',
        'LDL': 'int64',
        'HDL': 'int64',
        'Triglycerides': 'int64',
        'WHR': 'float64',
        'FamilyHistory': 'int64',
        'MedicationUse': 'int64',
        'outlier': 'int64'
    }
    
    # Appliquer les conversions
    for col in df.columns:
        if col in type_conversions:
            try:
                if type_conversions[col] == 'int64':
                    # Conversion en num√©rique puis en entier
                    df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0).astype('int64')
                elif type_conversions[col] == 'float64':
                    # Conversion en num√©rique puis en float
                    df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0.0).astype('float64')
            except (ValueError, TypeError) as e:
                logger.error(f"Erreur de conversion pour la colonne {col} : {e}")
                # Pour les colonnes critiques, on pourrait arr√™ter l'ex√©cution ici
                if col in ['Glucose', 'BMI', 'Age']:
                    raise ValueError(f"Erreur de conversion pour la colonne critique {col}")
    
    # V√©rification des valeurs manquantes
    if df.isnull().any().any():
        logger.warning("Valeurs manquantes d√©tect√©es apr√®s conversion")
        # Remplissage des valeurs manquantes selon le type de colonne
        for col in df.columns:
            if df[col].dtype in ['int64', 'float64']:
                df[col].fillna(df[col].median(), inplace=True)
            else:
                df[col].fillna(df[col].mode()[0], inplace=True)
    
    return df

# ============================================
# GESTION DE LA BASE DE DONN√âES
# ============================================

class DatabaseManager:
    """Classe pour g√©rer les op√©rations de base de donn√©es"""
    
    def __init__(self, db_name: str = 'diabepredict.db'):
        self.db_name = db_name
        self._initialize_db()
    
    def _initialize_db(self) -> None:
        """Initialise la base de donn√©es avec les tables n√©cessaires"""
        try:
            with sqlite3.connect(self.db_name) as conn:
                c = conn.cursor()
                
                # Table utilisateurs
                c.execute('''CREATE TABLE IF NOT EXISTS users
                            (id INTEGER PRIMARY KEY AUTOINCREMENT,
                             username TEXT UNIQUE,
                             password TEXT,
                             email TEXT,
                             created_at TIMESTAMP)''')
                
                # Table analyses
                c.execute('''CREATE TABLE IF NOT EXISTS analyses
                            (id INTEGER PRIMARY KEY AUTOINCREMENT,
                             user_id INTEGER,
                             analysis_type TEXT,
                             parameters TEXT,
                             result TEXT,
                             probability REAL,
                             created_at TIMESTAMP,
                             FOREIGN KEY(user_id) REFERENCES users(id))''')
                
                conn.commit()
                logger.info("Base de donn√©es initialis√©e avec succ√®s")
        except sqlite3.Error as e:
            logger.error(f"Erreur lors de l'initialisation de la base de donn√©es: {e}")
            raise
    
    def add_user(self, username: str, password: str, email: str) -> bool:
        """Ajoute un nouvel utilisateur √† la base de donn√©es"""
        try:
            with sqlite3.connect(self.db_name) as conn:
                c = conn.cursor()
                c.execute(
                    "INSERT INTO users (username, password, email, created_at) VALUES (?, ?, ?, ?)",
                    (username, password, email, datetime.now())
                )
                conn.commit()
                logger.info(f"Nouvel utilisateur cr√©√©: {username}")
                return True
        except sqlite3.IntegrityError:
            logger.warning(f"Tentative de cr√©ation d'un utilisateur existant: {username}")
            return False
        except sqlite3.Error as e:
            logger.error(f"Erreur lors de l'ajout d'un utilisateur: {e}")
            return False
    
    def verify_user(self, username: str, password: str) -> Optional[Tuple[int, str]]:
        """V√©rifie les identifiants de l'utilisateur"""
        try:
            with sqlite3.connect(self.db_name) as conn:
                c = conn.cursor()
                c.execute(
                    "SELECT id, username FROM users WHERE username=? AND password=?",
                    (username, password)
                )
                result = c.fetchone()
                if result:
                    logger.info(f"Utilisateur authentifi√©: {username}")
                else:
                    logger.warning(f"Tentative de connexion √©chou√©e pour: {username}")
                return result
        except sqlite3.Error as e:
            logger.error(f"Erreur lors de la v√©rification de l'utilisateur: {e}")
            return None
    
    def add_analysis(self, user_id: int, analysis_type: str, 
                    parameters: Dict[str, Any], result: str, 
                    probability: float) -> bool:
        """Enregistre une analyse dans la base de donn√©es"""
        try:
            with sqlite3.connect(self.db_name) as conn:
                c = conn.cursor()
                c.execute(
                    """INSERT INTO analyses 
                    (user_id, analysis_type, parameters, result, probability, created_at) 
                    VALUES (?, ?, ?, ?, ?, ?)""",
                    (user_id, analysis_type, str(parameters), result, probability, datetime.now())
                )
                conn.commit()
                logger.info(f"Nouvelle analyse enregistr√©e pour l'utilisateur {user_id}")
                return True
        except sqlite3.Error as e:
            logger.error(f"Erreur lors de l'ajout d'une analyse: {e}")
            return False
    
    def get_user_analyses(self, user_id: int) -> pd.DataFrame:
        """R√©cup√®re l'historique des analyses d'un utilisateur"""
        try:
            with sqlite3.connect(self.db_name) as conn:
                df = pd.read_sql(
                    "SELECT * FROM analyses WHERE user_id=? ORDER BY created_at DESC",
                    conn,
                    params=(user_id,)
                )
                logger.info(f"R√©cup√©ration de {len(df)} analyses pour l'utilisateur {user_id}")
                return df
        except (sqlite3.Error, pd.errors.DatabaseError) as e:
            logger.error(f"Erreur lors de la r√©cup√©ration des analyses: {e}")
            return pd.DataFrame()

# Initialisation de la base de donn√©es
db_manager = DatabaseManager()

# ============================================
# MOD√àLE DE PR√âDICTION
# ============================================

class DiabePredictModel:
    def __init__(self, model_path: str = "modeldiabete3.pkl"):
        self.model_path = model_path
        self.model = self._load_model()
    
    def _load_model(self):
        """Charge le mod√®le avec gestion d'erreur am√©lior√©e"""
        try:
            abs_path = os.path.abspath(self.model_path)
            print(f"Tentative de chargement depuis : {abs_path}")  # Debug
            
            if not os.path.exists(abs_path):
                st.error(f"Fichier mod√®le introuvable : {abs_path}")
                st.info("Contenu du r√©pertoire :")
                st.write(os.listdir(os.path.dirname(abs_path)))  # Affiche les fichiers disponibles
                st.stop()
            
            # V√©rification de la taille du fichier
            file_size = os.path.getsize(abs_path)
            if file_size < 100:  # Taille minimale attendue
                st.error(f"Fichier mod√®le semble corrompu (taille: {file_size} octets)")
                st.stop()
            
            with open(abs_path, 'rb') as f:
                model = joblib.load(f)
            
            logger.info(f"Mod√®le charg√© avec succ√®s depuis {abs_path}")
            return model
            
        except Exception as e:
            logger.error(f"Erreur de chargement du mod√®le : {str(e)}", exc_info=True)
            st.error(f"""
                Erreur technique lors du chargement du mod√®le:
                {str(e)}
                
                Causes possibles :
                1. Fichier mod√®le corrompu
                2. Version incompatible de scikit-learn
                3. Probl√®me de permissions
                """)
            st.stop()
    
    def predict(self, input_data: pd.DataFrame) -> Tuple[int, float]:
        """
        Effectue une pr√©diction avec le mod√®le charg√©
        
        Args:
            input_data: DataFrame pandas contenant les donn√©es d'entr√©e
            
        Returns:
            Tuple contenant:
            - La pr√©diction (0 pour faible risque, 1 pour risque √©lev√©)
            - La probabilit√© associ√©e (entre 0 et 1)
        """
        try:
            # V√©rification que le mod√®le est bien charg√©
            if not hasattr(self, 'model') or self.model is None:
                raise ValueError("Mod√®le non charg√©")
                
            # V√©rification et conversion des types de donn√©es
            input_data = convert_data_types(input_data)
                
            # V√©rification des colonnes requises
            required_columns = ['Age', 'Pregnancies', 'BMI', 'Glucose', 'BloodPressure',
                              'LDL', 'HDL', 'Triglycerides', 'WHR', 'FamilyHistory', 'MedicationUse', 'outlier']
            
            # Ajout de la colonne outlier si elle n'existe pas
            if 'outlier' not in input_data.columns:
                input_data['outlier'] = 0
                
            # V√©rification que toutes les colonnes requises sont pr√©sentes
            missing_cols = [col for col in required_columns if col not in input_data.columns]
            if missing_cols:
                raise ValueError(f"Colonnes manquantes dans les donn√©es d'entr√©e : {missing_cols}")
                
            # R√©organisation des colonnes selon l'ordre attendu par le mod√®le
            input_data = input_data[required_columns]
                
            # Pr√©diction
            prediction = self.model.predict(input_data)[0]  # Retourne 0 ou 1
            probability = self.model.predict_proba(input_data)[0][1]  # Probabilit√© de classe 1
            
            logger.info(f"Pr√©diction effectu√©e - R√©sultat: {prediction}, Probabilit√©: {probability:.2f}")
            return prediction, probability
            
        except Exception as e:
            logger.error(f"Erreur lors de la pr√©diction: {str(e)}", exc_info=True)
            st.error(f"Erreur lors de la pr√©diction: {str(e)}")
            raise

# Initialisation du mod√®le
predict_model = DiabePredictModel()

def estimer_temps(probabilite: float) -> str:
    """Estime le temps jusqu'√† l'apparition du diab√®te"""
    if probabilite < 0.2:
        return "Faible risque (>10 ans)"
    elif probabilite < 0.5:
        return "Risque mod√©r√© (5-10 ans)"
    elif probabilite < 0.8:
        return "Risque √©lev√© (3-5 ans)"
    else:
        return "Risque tr√®s √©lev√© (<3 ans)"

# ============================================
# STYLE ET TH√àME AM√âLIOR√â
# ============================================

def set_custom_style() -> None:
    """D√©finit le style personnalis√© de l'application avec un bleu ciel tr√®s clair"""
    st.markdown(f"""
    <style>        :root {{
            --primary: #A7D8F0;  /* Bleu ciel tr√®s clair */
            --primary-dark: #8BC8E6;  /* Un peu plus fonc√© */
            --primary-light: #D1EDFC;  /* Tr√®s l√©ger */
            --secondary: #7AC1E4;  /* Pour les accents */
            --success: #A0E6C1;   /* Vert pastel */
            --warning: #FFD699;   /* Orange doux */
            --danger: #FFA7A7;    /* Rouge doux */
            --light: #F5FBFF;     /* Fond presque blanc bleut√© */
            --dark: #4A6B7D;      /* Teinte sombre douce */
            --gray: #8CA3A6;      /* Gris bleut√© */
            --white: #FFFFFF;
            --card-bg: #FFFFFF;
        }}
        
        /* Fond g√©n√©ral plus l√©ger */
        .stApp {{
            background-color: #F5FBFF !important;
        }}
        
        /* En-t√™te plus doux */
        .st-emotion-cache-1avcm0n {{
            background: var(--primary-dark) !important;
        }}
        
        /* Cartes avec ombre plus subtile */
        .card {{
            background: var(--card-bg);
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 4px 12px rgba(167, 216, 240, 0.2);
            margin-bottom: 1.5rem;
            border-left: 4px solid var(--primary);
        }}
        
        /* Boutons plus doux */
        .stButton>button {{
            background-color: var(--primary) !important;
            color: var(--dark) !important;
            border-radius: 8px;
            padding: 0.5rem 1rem;
            font-weight: 500;
            border: none;
            box-shadow: 0 2px 6px rgba(139, 200, 230, 0.3);
        }}
        
        .stButton>button:hover {{
            background-color: var(--primary-dark) !important;
            color: white !important;
        }}
        
        /* Inputs avec fond tr√®s l√©ger */
        .stTextInput input, .stNumberInput input, .stSelectbox select {{
            border-radius: 8px !important;
            border: 1px solid var(--primary) !important;
            background-color: #FBFEFF !important;
        }}
    </style>
    """, unsafe_allow_html=True)

# ============================================
# AUTHENTIFICATION
# ============================================


import streamlit as st
import base64

def show_auth_page() -> None:
    """Affiche la page d'authentification avec le nouveau th√®me bleu ciel"""
    # CSS personnalis√©
    st.markdown(""" 
    <style>
        /* Cacher tous les √©l√©ments Streamlit par d√©faut */
        #MainMenu, header, footer, .stApp > header:first-child {
            display: none !important;
        }

        /* Reset des marges et paddings */
        .stApp {
            margin: 0 !important;
            padding: 0 !important;
            min-height: 100vh;
            background: linear-gradient(135deg, #E0F7FA, #F0F8FF) !important;
        }

        /* Conteneur principal */
        .main-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 1rem;
        }

        /* Carte d'authentification */
        .auth-card {
            width: 100%;
            max-width: 500px;
            padding: 2.5rem;
            border-radius: 16px;
            background: rgba(255, 255, 255, 0.95);
            box-shadow: 0 8px 24px rgba(143, 188, 214, 0.3);
            animation: fadeInUp 0.8s ease both;
        }

        @keyframes fadeInUp {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Styles des √©l√©ments */
        .auth-title {
            text-align: center;
            color: #2F4F4F;
            margin-bottom: 0.5rem;
            font-size: 2rem;
            font-weight: 700;
        }

        .auth-subtitle {
            text-align: center;
            color: #708090;
            margin-bottom: 2rem;
            font-size: 1rem;
        }

        .auth-logo {
            display: block;
            margin: 0 auto 1.5rem;
            width: 90px;
            height: 90px;
            border-radius: 50%;
            object-fit: cover;
            border: 3px solid #87CEEB;
            box-shadow: 0 4px 12px rgba(143, 188, 214, 0.3);
        }

        .auth-footer {
            text-align: center;
            margin-top: 2rem;
            color: #708090;
            font-size: 0.85rem;
        }

        /* Styles des formulaires */
        .stTextInput input, .stTextInput input:focus, 
        .stTextArea textarea, .stTextArea textarea:focus {
            border-radius: 8px !important;
            border: 1px solid #B0E0E6 !important;
            box-shadow: none !important;
            background-color: #F0F8FF !important;
        }

        .stButton button {
            width: 100%;
            background-color: #87CEEB !important;
            color: #2F4F4F !important;
            border-radius: 8px !important;
            font-weight: 600 !important;
            padding: 0.75rem !important;
            transition: all 0.3s ease !important;
        }

        .stButton button:hover {
            background-color: #5F9EA0 !important;
            color: white !important;
            transform: translateY(-2px);
        }

        /* Onglets */
        .stTabs [role="tablist"] {
            margin-bottom: 1.5rem;
        }

        .stTabs [role="tab"] {
            padding: 0.5rem 1rem;
            border-radius: 8px 8px 0 0;
            background: #E6F2F8 !important;
        }

        /* Suppression des espaces inutiles */
        div:empty {
            display: none !important;
        }
    </style>
    """, unsafe_allow_html=True)

    # Conteneur principal
    st.markdown('<div class="main-container">', unsafe_allow_html=True)
    st.markdown('<div class="auth-card">', unsafe_allow_html=True)

    try:
        # Logo - Chemin relatif recommand√©
        logo_path = os.path.join("assets", "page.jpg")
        with open(logo_path, "rb") as image_file:
            encoded_image = base64.b64encode(image_file.read()).decode()

        st.markdown(
            f'<img class="auth-logo" src="data:image/jpeg;base64,{encoded_image}">',
            unsafe_allow_html=True
        )
    except Exception as e:
        st.error(f"Erreur de chargement du logo: {str(e)}")
        # Logo par d√©faut si √©chec
        st.markdown(
            '<div class="auth-logo" style="background: #38b2ac; display: flex; justify-content: center; align-items: center; color: white; font-weight: bold;">Logo</div>',
            unsafe_allow_html=True
        )

    # Titres
    st.markdown("<h1 class='auth-title'>Pr√©diction de diab√®te</h1>", unsafe_allow_html=True)
    st.markdown("<p class='auth-subtitle'>Solution professionnelle de pr√©diction du risque diab√©tique</p>", unsafe_allow_html=True)

    # Onglets Connexion/Inscription
    tab1, tab2 = st.tabs(["Se connecter", "Cr√©er un compte"])

    with tab1:
        with st.form("login_form", clear_on_submit=True):
            username = st.text_input("Nom d'utilisateur", placeholder="Entrez votre nom d'utilisateur")
            password = st.text_input("Mot de passe", type="password", placeholder="Entrez votre mot de passe")
            
            submitted = st.form_submit_button("Se connecter", type="primary")
            if submitted:
                if not username or not password:
                    st.error("Veuillez remplir tous les champs")
                else:
                    user_data = db_manager.verify_user(username, password)
                    if user_data:
                        st.session_state.update({
                            'user_id': user_data[0],
                            'username': user_data[1],
                            'authenticated': True,
                            'current_page': "Accueil"
                        })
                        st.rerun()
                    else:
                        st.error("Identifiants incorrects")

    with tab2:
        with st.form("register_form", clear_on_submit=True):
            new_user = st.text_input("Nom d'utilisateur", placeholder="Choisissez un nom d'utilisateur")
            new_pass = st.text_input("Mot de passe", type="password", placeholder="Cr√©ez un mot de passe")
            confirm_pass = st.text_input("Confirmer le mot de passe", type="password", placeholder="Confirmez le mot de passe")
            new_email = st.text_input("Email", placeholder="Entrez votre email")
            
            submitted = st.form_submit_button("S'inscrire", type="primary")
            if submitted:
                if not all([new_user, new_pass, confirm_pass, new_email]):
                    st.error("Veuillez remplir tous les champs")
                elif new_pass != confirm_pass:
                    st.error("Les mots de passe ne correspondent pas")
                elif len(new_pass) < 6:
                    st.error("Le mot de passe doit contenir au moins 6 caract√®res")
                elif "@" not in new_email or "." not in new_email.split("@")[1]:
                    st.error("Veuillez entrer une adresse email valide")
                else:
                    if db_manager.add_user(new_user, new_pass, new_email):
                        st.success("Compte cr√©√© avec succ√®s! Veuillez vous connecter.")
                    else:
                        st.error("Ce nom d'utilisateur existe d√©j√†")

    # Pied de page
    st.markdown('<p class="auth-footer">¬© 2025 Pr√©diction de diab√®te - Tous droits r√©serv√©s</p>', unsafe_allow_html=True)
    
    # Fermeture des divs
    st.markdown('</div>', unsafe_allow_html=True)  # auth-card
    st.markdown('</div>', unsafe_allow_html=True)  # main-container



# ============================================
# NAVIGATION LAT√âRALE
# ============================================

def show_sidebar_navigation() -> None:
    """Affiche la navigation dans la barre lat√©rale avec logo circulaire"""
    with st.sidebar:
        # Style CSS personnalis√© pour la sidebar (en conservant vos couleurs existantes)
        st.markdown("""
        <style>
            /* Style g√©n√©ral de la sidebar */
            [data-testid="stSidebar"] {
                background: linear-gradient(135deg, #B0E0E6, #87CEEB) !important;
                padding: 1.5rem 1rem !important;
            }
            
            /* Style du logo circulaire */
            .sidebar-logo {
                display: block;
                margin: 0 auto 1.5rem;
                width: 100px;
                height: 100px;
                border-radius: 50%;
                object-fit: cover;
                border: 3px solid #8BC8E6;
                box-shadow: 0 4px 12px rgba(139, 200, 230, 0.3);
                transition: all 0.3s ease;
            }
            
            .sidebar-logo:hover {
                transform: scale(1.05);
                box-shadow: 0 6px 16px rgba(139, 200, 230, 0.4);
            }
            
            /* Style des informations utilisateur */
            .sidebar-user-info {
                background: rgba(255, 255, 255, 0.3);
                padding: 0.75rem;
                border-radius: 8px;
                margin: 1.5rem 0 2rem 0;  /* Espace augment√© en bas */
                color: #2F4F4F;
            }
            
            /* Style des boutons de navigation */
            .sidebar-nav-button {
                width: 100%;
                margin: 0.5rem 0;
                padding: 0.75rem 1rem !important;
                border-radius: 8px !important;
                background: rgba(255, 255, 255, 0.3) !important;
                color: #2F4F4F !important;
                font-weight: 500 !important;
                text-align: left;
                transition: all 0.3s ease !important;
                border: none !important;
                box-shadow: none !important;
            }
            
            .sidebar-nav-button:hover {
                background: rgba(255, 255, 255, 0.5) !important;
                transform: translateX(5px) !important;
            }
            
            /* Bouton de d√©connexion */
            .sidebar-logout-button {
                background: rgba(255, 255, 255, 0.7) !important;
                color: #FF6347 !important;
                border: 1px solid rgba(255, 99, 71, 0.3) !important;
                margin-top: 1.5rem;  /* Espace suppl√©mentaire au-dessus */
            }
            
            .sidebar-logout-button:hover {
                background: rgba(255, 99, 71, 0.2) !important;
                color: white !important;
            }
        </style>
        """, unsafe_allow_html=True)

        # Ajout du logo circulaire
        try:
            logo_path = os.path.join("assets", "page.jpg")
            with open(logo_path, "rb") as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode()
            
            st.markdown(
                f'<img class="sidebar-logo" src="data:image/jpeg;base64,{encoded_image}" alt="Logo">',
                unsafe_allow_html=True
            )
        except Exception as e:
            logger.error(f"Erreur de chargement du logo: {str(e)}")
            # Logo par d√©faut si √©chec
            st.markdown(
                '<div class="sidebar-logo" style="display: flex; justify-content: center; '
                'align-items: center; background: #8BC8E6; color: white; font-size: 2rem;">DP</div>',
                unsafe_allow_html=True
            )

        # Informations utilisateur
        st.markdown(f"""
        <div class="sidebar-user-info">
            <p style="opacity: 0.8; margin-bottom: 0.25rem; font-size: 0.9rem;">Connect√© en tant que</p>
            <p style="font-weight: 500; margin-bottom: 0;">
                {st.session_state.get('username', '')}
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        # Boutons de navigation
        nav_options = {
            "Accueil": "üè†",
            "Pr√©diction": "üîç",
            "Historique": "üìä",
            "Documentation": "üìö",
            "√Ä propos": "‚ÑπÔ∏è"
        }
        
        for page, icon in nav_options.items():
            if st.button(
                f"{icon} {page}", 
                key=f"nav_{page.lower()}",
                use_container_width=True,
                help=f"Aller √† la page {page}"
            ):
                st.session_state['current_page'] = page
                st.rerun()
        
        # Bouton de d√©connexion
        if st.button(
            "üö™ D√©connexion", 
            key="nav_logout",
            use_container_width=True,
            help="Se d√©connecter du compte"
        ):
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.rerun()
# ============================================
# PAGES DE L'APPLICATION
# ============================================

def show_home_page() -> None:
    """Affiche la page d'accueil"""
    st.markdown("""
        <div class="welcome-section">
            <h1 style="color: #2d3748; margin-bottom: 0.5rem;">Bienvenue sur Prediction Diabete</h1>
            <p style="font-size: 1.1rem; color: #4a5568;">Solution avanc√©e de pr√©diction du risque diab√©tique</p>
        </div>
    """, unsafe_allow_html=True)
    
    # Section 1 - D√©finition du diab√®te
    with st.container():
        st.markdown("### Qu'est-ce que le diab√®te ?")
        st.markdown("""
            Le diab√®te est une maladie chronique qui survient lorsque le pancr√©as ne produit pas suffisamment d'insuline 
            ou lorsque l'organisme ne peut pas utiliser efficacement l'insuline qu'il produit.
        """)
        
        cols = st.columns(3)
        with cols[0]:
            st.markdown("""
                <div class="card">
                    <div style="font-size: 2rem; color: #3182ce; margin-bottom: 1rem;">1Ô∏è‚É£</div>
                    <h3 style="color: #2d3748;">Diab√®te de type 1</h3>
                    <p style="color: #4a5568;">Caract√©ris√© par une absence de production d'insuline, n√©cessitant des injections quotidiennes.</p>
                </div>
            """, unsafe_allow_html=True)
        with cols[1]:
            st.markdown("""
                <div class="card">
                    <div style="font-size: 2rem; color: #3182ce; margin-bottom: 1rem;">2Ô∏è‚É£</div>
                    <h3 style="color: #2d3748;">Diab√®te de type 2</h3>
                    <p style="color: #4a5568;">R√©sulte d'une utilisation inefficace de l'insuline par l'organisme, souvent li√© au mode de vie.</p>
                </div>
            """, unsafe_allow_html=True)
        with cols[2]:
            st.markdown("""
                <div class="card">
                    <div style="font-size: 2rem; color: #3182ce; margin-bottom: 1rem;">ü§∞</div>
                    <h3 style="color: #2d3748;">Diab√®te gestationnel</h3>
                    <p style="color: #4a5568;">Hyperglyc√©mie apparaissant pendant la grossesse, pouvant entra√Æner des complications.</p>
                </div>
            """, unsafe_allow_html=True)
    
    # Section 2 - Statistiques
    with st.container():
        st.markdown("### Statistiques alarmantes")
        cols = st.columns(3)
        with cols[0]:
            st.markdown("""
                <div class="card">
                    <h3 style="color: #3182ce; margin-bottom: 0.5rem;">422 millions</h3>
                    <p style="color: #4a5568;">de personnes diab√©tiques dans le monde (OMS)</p>
                </div>
            """, unsafe_allow_html=True)
        with cols[1]:
            st.markdown("""
                <div class="card">
                    <h3 style="color: #3182ce; margin-bottom: 0.5rem;">1.5 million</h3>
                    <p style="color: #4a5568;">de d√©c√®s directement li√©s au diab√®te chaque ann√©e</p>
                </div>
            """, unsafe_allow_html=True)
        with cols[2]:
            st.markdown("""
                <div class="card">
                    <h3 style="color: #3182ce; margin-bottom: 0.5rem;">+50%</h3>
                    <p style="color: #4a5568;">d'augmentation des cas depuis 1980</p>
                </div>
            """, unsafe_allow_html=True)
    
    # Section 3 - Pr√©vention
    with st.container():
        st.markdown("### Conseils de pr√©vention")
        cols = st.columns(3)
        with cols[0]:
            st.markdown("""
                <div class="card">
                    <div style="font-size: 2rem; color: #3182ce; margin-bottom: 1rem;">üçé</div>
                    <h3 style="color: #2d3748;">Alimentation saine</h3>
                    <p style="color: #4a5568;">Privil√©giez les aliments riches en fibres et pauvres en sucres ajout√©s.</p>
                </div>
            """, unsafe_allow_html=True)
        with cols[1]:
            st.markdown("""
                <div class="card">
                    <div style="font-size: 2rem; color: #3182ce; margin-bottom: 1rem;">üèÉ‚Äç‚ôÇÔ∏è</div>
                    <h3 style="color: #2d3748;">Activit√© physique</h3>
                    <p style="color: #4a5568;">Au moins 150 minutes d'activit√© mod√©r√©e par semaine.</p>
                </div>
            """, unsafe_allow_html=True)
        with cols[2]:
            st.markdown("""
                <div class="card">
                    <div style="font-size: 2rem; color: #3182ce; margin-bottom: 1rem;">üìä</div>
                    <h3 style="color: #2d3748;">Surveillance</h3>
                    <p style="color: #4a5568;">Contr√¥lez r√©guli√®rement votre glyc√©mie et votre tension art√©rielle.</p>
                </div>
            """, unsafe_allow_html=True)

# ============================================
# PAGE DE PR√âDICTION AM√âLIOR√âE
# ============================================

def show_prediction_page() -> None:
    """Affiche la page de pr√©diction compl√®te avec les deux onglets"""
    # Style CSS
    st.markdown("""
    <style>
        .st-emotion-cache-1dp5vir { border-width: 0 !important; }
        .result-card {
            background: #f8fafc;
            border-radius: 16px;
            padding: 2rem;
            margin: 2rem 0;
        }
        .recommendation-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            margin: 1rem 0;
            border-left: 4px solid #4361ee;
        }
        .input-card {
            background: #f8fafc;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }
    </style>
    """, unsafe_allow_html=True)
    
    # Onglets
    tab1, tab2 = st.tabs(["üîç Analyse individuelle", "üìä Analyse par lot"])
    
    with tab1:
        st.markdown("""
        <div style="text-align: center; margin-bottom: 2rem;">
            <h1 style="color: #2d3748;">√âvaluation du risque diab√©tique</h1>
            <p style="color: #4a5568;">Remplissez les informations ci-dessous pour obtenir une √©valuation personnalis√©e</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Section de saisie avec toutes les colonnes de l'image
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown('<div class="input-card">', unsafe_allow_html=True)
            age = st.number_input("√Çge (ann√©es)", min_value=0, max_value=120, value=45)
            pregnancies = st.number_input("Nombre de grossesses", min_value=0, max_value=20, value=0)
            bmi = st.number_input("IMC (kg/m¬≤)", min_value=10.0, max_value=70.0, value=25.0, step=0.1)
            st.markdown('</div>', unsafe_allow_html=True)
            
        with col2:
            st.markdown('<div class="input-card">', unsafe_allow_html=True)
            glucose = st.number_input("Glucose sanguin (mg/dL)", min_value=0, max_value=300, value=100)
            bloodPressure = st.number_input("Pression art√©rielle (mmHg)", min_value=0, max_value=200, value=80)
            ldl = st.number_input("LDL (mg/dL)", min_value=0, max_value=300, value=100)
            st.markdown('</div>', unsafe_allow_html=True)
            
        with col3:
            st.markdown('<div class="input-card">', unsafe_allow_html=True)
            hdl = st.number_input("HDL (mg/dL)", min_value=0, max_value=100, value=50)
            triglycerides = st.number_input("Triglyc√©rides (mg/dL)", min_value=0, max_value=1000, value=150)
            waist_hip_ratio = st.number_input("Ratio Taille/Hanche", min_value=0.0, max_value=2.0, value=0.8, step=0.01)
            st.markdown('</div>', unsafe_allow_html=True)
        
        # Autres inputs sur une nouvelle ligne
        col4, col5 = st.columns(2)
        with col4:
            st.markdown('<div class="input-card">', unsafe_allow_html=True)
            family_history = st.selectbox("Ant√©c√©dents familiaux", ["Non", "Oui"])
            st.markdown('</div>', unsafe_allow_html=True)
        with col5:
            st.markdown('<div class="input-card">', unsafe_allow_html=True)
            medications = st.selectbox("M√©dicaments pour le diab√®te", ["Non", "Oui"])
            st.markdown('</div>', unsafe_allow_html=True)

        if st.button("üöÄ √âvaluer le risque", type="primary", use_container_width=True):
            with st.spinner("Analyse en cours..."):
                time.sleep(1.5)
                
                # Calcul du risque mis √† jour avec toutes les variables
                risk_score = min(
                    max(
                        (age/100 + bmi/50 + glucose/300 + bloodPressure/200 + ldl/400 - hdl/200 + triglycerides/500 + waist_hip_ratio/2) / 5 
                        * (1.2 if family_history == "Oui" else 1)
                        * (1.3 if medications == "Oui" else 1), 
                        0
                    ),
                    0.95
                )
                risk_percentage = round(risk_score * 100, 1)
                time_estimation = estimer_temps(risk_score)
                
                # Affichage des r√©sultats
                st.markdown('<div class="result-card">', unsafe_allow_html=True)
                
                # Score principal
                st.markdown(f"""
                <div style="text-align: center;">
                    <h2 style="color: #2d3748;">Votre r√©sultat</h2>
                    <div style="font-size: 4rem; font-weight: 800; color: #4361ee; margin: 0.5rem 0;">
                        {risk_percentage}%
                    </div>
                    <div style="font-size: 1.2rem; color: #4a5568;">
                        Probabilit√© de d√©velopper un diab√®te
                    </div>
                </div>
                """, unsafe_allow_html=True)
                
                # Barre de risque visuelle
                fig = go.Figure(go.Indicator(
                    mode = "number+gauge",
                    value = risk_percentage,
                    number = {'suffix': "%"},
                    domain = {'x': [0, 1], 'y': [0, 1]},
                    gauge = {
                        'axis': {'range': [None, 100]},
                        'steps': [
                            {'range': [0, 30], 'color': "#28a745"},  # Vert
                            {'range': [30, 70], 'color': "#fd7e14"},  # Orange
                            {'range': [70, 100], 'color': "#dc3545"}],  # Rouge
                        'bar': {'color': "#007bff"},  # Bleu
                        'threshold': {
                            'line': {'color': "black", 'width': 4},
                            'thickness': 0.75,
                            'value': risk_percentage
                        }
                    }))
                fig.update_layout(height=150, margin=dict(t=0, b=0))
                st.plotly_chart(fig, use_container_width=True)
                
                # Estimation du temps
                st.markdown(f"""
                <div style="text-align: center; margin: 1.5rem 0; padding: 1rem; 
                            background: #f0f4f8; border-radius: 8px;">
                    <h3 style="color: #2d3748;">‚è± Estimation temporelle</h3>
                    <p style="font-size: 1.2rem;">{time_estimation}</p>
                </div>
                """, unsafe_allow_html=True)
                
                # Recommandations personnalis√©es
                st.markdown("### üìã Recommandations personnalis√©es")
                
                if risk_score < 0.4:
                    st.markdown("""
                    <div class="recommendation-card">
                        <h3 style="color: #4cc9f0;">‚úî Votre risque est faible</h3>
                        <ul style="color: #4a5568;">
                            <li>Continuez vos bonnes habitudes alimentaires</li>
                            <li>Maintenez une activit√© physique r√©guli√®re (30 min/jour)</li>
                            <li>Contr√¥le annuel de votre glyc√©mie</li>
                            <li>Surveillez votre poids et votre IMC</li>
                        </ul>
                    </div>
                    """, unsafe_allow_html=True)
                    
                elif risk_score < 0.7:
                    st.markdown("""
                    <div class="recommendation-card">
                        <h3 style="color: #f8961e;">‚ö† Votre risque est mod√©r√©</h3>
                        <ul style="color: #4a5568;">
                            <li>Consultez un m√©decin pour un bilan complet</li>
                            <li>Augmentez votre activit√© physique (45 min/jour)</li>
                            <li>R√©duisez les sucres rapides et les graisses satur√©es</li>
                            <li>Contr√¥le glyc√©mique trimestriel recommand√©</li>
                            <li>Perte de poids conseill√©e si IMC > 25</li>
                        </ul>
                    </div>
                    """, unsafe_allow_html=True)
                    
                else:
                    st.markdown("""
                    <div class="recommendation-card">
                        <h3 style="color: #ef233c;">‚ùó Votre risque est √©lev√©</h3>
                        <ul style="color: #4a5568;">
                            <li>Consultation m√©dicale urgente recommand√©e</li>
                            <li>Programme d'activit√© physique supervis√©</li>
                            <li>R√©gime alimentaire strict pauvre en glucides</li>
                            <li>Surveillance glyc√©mique mensuelle</li>
                            <li>Bilan complet avec endocrinologue</li>
                            <li>√âvaluation des autres facteurs de risque cardiovasculaire</li>
                        </ul>
                    </div>
                    """, unsafe_allow_html=True)
                
                st.markdown('</div>', unsafe_allow_html=True)
    
    with tab2:
        # Partie Analyse par Lot
        st.markdown("""
        <div style="text-align: center; margin-bottom: 2rem;">
            <h1 style="color: #2d3748;">Analyse par lot</h1>
            <p style="color: #4a5568;">Importez un fichier CSV pour analyser plusieurs patients simultan√©ment</p>
        </div>
        """, unsafe_allow_html=True)
        
        uploaded_file = st.file_uploader(
            "üì§ Importer un fichier CSV", 
            type="csv",
            help="Le fichier doit contenir les colonnes requises: √Çge, Nombre de grossesses, IMC, Glucose sanguin, Pression art√©rielle, LDL, HDL, Triglyc√©rides, Ratio Taille/Hanche, Ant√©c√©dents familiaux, M√©dicaments"
        )
        
        if uploaded_file is not None:
            try:
                df = pd.read_csv(uploaded_file)
                
                # V√©rification des colonnes requises
                required_columns = ['Age', 'Pregnancies', 'BMI', 'Glucose', 
                                   'BloodPressure', 'LDL', 'HDL', 'Triglycerides',
                                   'WHR', 'FamilyHistory', 'MedicationUse']
                
                missing_columns = [col for col in required_columns if col not in df.columns]
                
                if missing_columns:
                    st.error(f"Colonnes manquantes dans le fichier: {', '.join(missing_columns)}")
                else:
                    with st.spinner("Analyse des donn√©es en cours..."):
                        time.sleep(1)
                        
                        # Simulation d'analyse avec toutes les variables
                        # Conversion des noms de colonnes fran√ßais en anglais si besoin
                        column_mapping = {
                            '√Çge': 'Age',
                            'Nombre de grossesses': 'Pregnancies',
                            'IMC': 'BMI',
                            'Glucose sanguin': 'Glucose',
                            'Pression art√©rielle': 'BloodPressure',
                            'LDL': 'LDL',
                            'HDL': 'HDL',
                            'Triglyc√©rides': 'Triglycerides',
                            'Ratio Taille/Hanche': 'WHR',
                            'Ant√©c√©dents familiaux': 'FamilyHistory',
                            'M√©dicaments': 'MedicationUse'
                        }
                        df = df.rename(columns=column_mapping)

                        df['Probabilit√©'] = np.round(
                            (df['Age']/100 + df['BMI']/50 + df['Glucose']/300 +
                             df['BloodPressure']/200 + df['LDL']/400 - df['HDL']/200 +
                             df['Triglycerides']/500 + df['WHR']/2) / 5
                            * df['FamilyHistory'].apply(lambda x: 1.2 if x == 1 else 1)
                            * df['MedicationUse'].apply(lambda x: 1.3 if x == 1 else 1),
                            2
                        )
                        df['Niveau de risque'] = pd.cut(df['Probabilit√©'], 
                                                      bins=[0, 0.4, 0.7, 1],
                                                      labels=['Faible', 'Mod√©r√©', '√âlev√©'])
                        df['Estimation temps'] = df['Probabilit√©'].apply(estimer_temps)
                        
                        # Affichage des r√©sultats
                        st.markdown('<div class="result-card">', unsafe_allow_html=True)
                        
                        # M√©triques r√©sum√©es
                        st.markdown("### üìä Statistiques globales")
                        cols = st.columns(3)
                        cols[0].metric("Patients analys√©s", len(df))
                        cols[1].metric("Risque moyen", f"{df['Probabilit√©'].mean()*100:.1f}%")
                        cols[2].metric("Cas √† risque √©lev√©", f"{(df['Niveau de risque'] == '√âlev√©').sum()}")
                        
                        # Diagramme unique (camembert)
                        st.markdown("### üìà R√©partition des risques")
                        risk_counts = df['Niveau de risque'].value_counts()
                        fig = px.pie(
                            risk_counts, 
                            values=risk_counts.values,
                            names=risk_counts.index,
                            color=risk_counts.index,
                            color_discrete_map={
                                'Faible': '#4cc9f0',
                                'Mod√©r√©': '#f8961e',
                                '√âlev√©': '#ef233c'
                            },
                            hole=0.3
                        )
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # Tableau r√©capitulatif
                        st.markdown("### üìã D√©tail des r√©sultats")
                        st.dataframe(
                            df.style.applymap(
                                lambda x: 'background-color: #e6f7ff' if x == 'Faible' else 
                                'background-color: #fff7e6' if x == 'Mod√©r√©' else 
                                'background-color: #ffe6e6',
                                subset=['Niveau de risque']
                            ),
                            column_config={
                                "Probabilit√©": st.column_config.ProgressColumn(
                                    "Probabilit√©",
                                    format="%.2f",
                                    min_value=0,
                                    max_value=1,
                                )
                            },
                            use_container_width=True,
                            height=400
                        )
                        
                        # Bouton d'export
                        st.download_button(
                            label="üíæ Exporter les r√©sultats",
                            data=df.to_csv(index=False).encode('utf-8'),
                            file_name='resultats_diabete.csv',
                            mime='text/csv',
                            use_container_width=True
                        )
                        
                        st.markdown('</div>', unsafe_allow_html=True)
            
            except Exception as e:
                st.error(f"Erreur lors de la lecture du fichier: {str(e)}")

def estimer_temps(probabilite: float) -> str:
    """Estime le temps jusqu'√† l'apparition du diab√®te"""
    if probabilite < 0.2:
        return "Apparition probable dans plus de 10 ans"
    elif probabilite < 0.5:
        return "Apparition probable entre 5 et 10 ans"
    elif probabilite < 0.8:
        return "Apparition probable entre 3 et 5 ans"
    else:
        return "Apparition probable dans moins de 3 ans"

def show_history_page() -> None:
    """Affiche l'historique des analyses"""
    st.markdown("### Historique des analyses")
    st.markdown("Consultez vos analyses pr√©c√©dentes et leurs r√©sultats.")
    
    try:
        analyses = db_manager.get_user_analyses(st.session_state['user_id'])
        
        if not analyses.empty:
            # Filtrer par type d'analyse
            analysis_types = analyses['analysis_type'].unique()
            selected_type = st.selectbox("Filtrer par type d'analyse", ["Tous"] + list(analysis_types))
            
            if selected_type != "Tous":
                analyses = analyses[analyses['analysis_type'] == selected_type]
            
            # Convertir les dates
            analyses['created_at'] = pd.to_datetime(analyses['created_at'])
            
            # Trier par date
            analyses = analyses.sort_values('created_at', ascending=False)
           
            # Afficher le tableau des analyses
            st.dataframe(
                analyses[['created_at', 'analysis_type', 'result', 'probability']],
                column_config={
                    "created_at": "Date",
                    "analysis_type": "Type d'analyse",
                    "result": "R√©sultat",
                    "probability": st.column_config.NumberColumn(
                        "Probabilit√©",
                        format="%.2f",
                        help="Probabilit√© de risque diab√©tique"
                    )
                },
                hide_index=True,
                use_container_width=True
            )
            
            # Option pour voir les d√©tails d'une analyse
            selected_analysis = st.selectbox(
                "Voir les d√©tails d'une analyse",
                [f"{row['created_at']} - {row['analysis_type']}" for _, row in analyses.iterrows()]
            )
            
            if selected_analysis:
                selected_idx = [i for i, x in enumerate(
                    [f"{row['created_at']} - {row['analysis_type']}" for _, row in analyses.iterrows()]
                ) if x == selected_analysis][0]
                
                selected = analyses.iloc[selected_idx]
                
                with st.expander("D√©tails de l'analyse", expanded=True):
                    st.json(selected['parameters'])
        else:
            st.info("Aucune analyse enregistr√©e pour le moment.")
    
    except Exception as e:
        st.error(f"Erreur lors du chargement de l'historique : {str(e)}")
        logger.error(f"Erreur historique : {str(e)}", exc_info=True)

def show_documentation_page() -> None:
    """Affiche la page de documentation avec un style am√©lior√©"""
    # Style CSS moderne
    st.markdown("""
    <style>
        .doc-section {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 4px 12px rgba(0,0,0,0.05);
            border-left: 4px solid #4361ee;
        }
        .doc-header {
            color: #2d3748;
            border-bottom: 2px solid #e2e8f0;
            padding-bottom: 0.5rem;
            margin-bottom: 1rem;
        }
        .doc-item {
            margin-bottom: 0.8rem;
            padding-left: 1rem;
            border-left: 3px solid #e2e8f0;
            transition: all 0.3s ease;
        }
        .doc-item:hover {
            border-left-color: #4361ee;
            background-color: #f8fafc;
        }
        .metric-card {
            background: #f8fafc;
            border-radius: 8px;
            padding: 1rem;
            margin: 0.5rem 0;
            border-left: 3px solid #4361ee;
        }
        .code-block {
            background: #2d3748;
            color: #f8fafc;
            padding: 1rem;
            border-radius: 8px;
            font-family: monospace;
            overflow-x: auto;
            white-space: pre;
        }
        .grid-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin: 1rem 0;
        }
        .warning-note {
            margin-top: 1.5rem;
            padding: 1rem;
            background: #fffaf0;
            border-radius: 8px;
            border-left: 3px solid #dd6b20;
        }
    </style>
    """, unsafe_allow_html=True)

    # En-t√™te
    st.markdown("""
    <div style="text-align: center; margin-bottom: 2rem;">
        <h1 style="color: #2d3748;">üìö Documentation Technique</h1>
        <p style="color: #4a5568;">Toutes les informations pour comprendre et utiliser notre outil de pr√©diction</p>
    </div>
    """, unsafe_allow_html=True)

    # Section 1 - Param√®tres du mod√®le
    with st.expander("üìã Param√®tres utilis√©s dans le mod√®le", expanded=True):
        st.markdown("""
        <div class="doc-section">
            <h3 class="doc-header">Description des param√®tres</h3>
            <div class="doc-item"><strong>√Çge</strong> : L'√¢ge du patient en ann√©es compl√®tes</div>
            <div class="doc-item"><strong>Nombre de grossesses</strong> : Pour les patientes femmes uniquement</div>
            <div class="doc-item"><strong>IMC</strong> : Indice de Masse Corporelle (poids en kg / taille¬≤ en m)</div>
            <div class="doc-item"><strong>Glucose sanguin</strong> : Taux de glucose √† jeun (mg/dL)</div>
            <div class="doc-item"><strong>Pression art√©rielle</strong> : Pression systolique (mmHg)</div>
            <div class="doc-item"><strong>LDL</strong> : "Mauvais" cholest√©rol (mg/dL)</div>
            <div class="doc-item"><strong>HDL</strong> : "Bon" cholest√©rol (mg/dL)</div>
            <div class="doc-item"><strong>Triglyc√©rides</strong> : Niveau dans le sang (mg/dL)</div>
            <div class="doc-item"><strong>Ratio Taille/Hanche</strong> : Circonf√©rence taille / circonf√©rence hanche</div>
            <div class="doc-item"><strong>Ant√©c√©dents familiaux</strong> : Diab√®te chez les parents au 1er degr√© (0=Non, 1=Oui)</div>
            <div class="doc-item"><strong>M√©dicaments</strong> : Utilisation de m√©dicaments pour le diab√®te (0=Non, 1=Oui)</div>
        </div>
        """, unsafe_allow_html=True)

    # Section 2 - Interpr√©tation
    with st.expander("üìà Interpr√©tation des r√©sultats", expanded=False):
        st.markdown("""
        <div class="doc-section">
            <h3 class="doc-header">√âchelle de risque</h3>
            <div class="metric-card" style="border-left-color: #38a169;"><strong style="color: #38a169;">0-20%</strong> : Risque tr√®s faible</div>
            <div class="metric-card" style="border-left-color: #68d391;"><strong style="color: #68d391;">20-40%</strong> : Risque faible</div>
            <div class="metric-card" style="border-left-color: #f6ad55;"><strong style="color: #f6ad55;">40-60%</strong> : Risque mod√©r√©</div>
            <div class="metric-card" style="border-left-color: #f56565;"><strong style="color: #f56565;">60-80%</strong> : Risque √©lev√©</div>
            <div class="metric-card" style="border-left-color: #e53e3e;"><strong style="color: #e53e3e;">80-100%</strong> : Risque tr√®s √©lev√©</div>
            <div class="warning-note">
                <strong>Seuil de d√©cision</strong> : Un r√©sultat est consid√©r√© comme "√† risque" lorsque la probabilit√© d√©passe <strong style="color: #dd6b20;">50%</strong>.
            </div>
        </div>
        """, unsafe_allow_html=True)

    # Section 3 - M√©thodologie (CORRIG√âE)
    with st.expander("üî¨ M√©thodologie scientifique", expanded=False):
       st.markdown("""
    <div class="doc-section">
        <h3 class="doc-header">Processus d'analyse</h3>
        <p>Notre approche suit une m√©thodologie rigoureuse :</p>
        <div class="doc-item">
            <strong>1. Exploration des donn√©es</strong> : Analyse pr√©liminaire sous Jupyter Notebook avec :
            <ul style="margin-top: 0.5rem; margin-left: 1.5rem;">
                <li>Visualisation des distributions</li>
                <li>D√©tection des valeurs aberrantes</li>
                <li>Analyse des corr√©lations</li>
            </ul>
        </div>
        <div class="doc-item">
            <strong>2. Pr√©traitement</strong> :
            <ul style="margin-top: 0.5rem; margin-left: 1.5rem;">
                <li>Nettoyage des donn√©es manquantes</li>
                <li>Normalisation des caract√©ristiques</li>
                <li>Encodage des variables cat√©gorielles</li>
            </ul>
        </div>
        <div class="doc-item">
            <strong>3. Mod√©lisation</strong> : Impl√©mentation d'une <strong>R√©gression Logistique</strong> avec :
            <ul style="margin-top: 0.5rem; margin-left: 1.5rem;">
                <li>R√©glage des hyperparam√®tres</li>
                <li>Validation crois√©e (k=5)</li>
                <li>Optimisation de la fonction de co√ªt</li>
            </ul>
        </div>
        <h3 class="doc-header" style="margin-top: 1.5rem;">Validation du mod√®le</h3>
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin: 1rem 0;">
            <div class="metric-card">
                <div style="font-size: 1.5rem; color: #4361ee;">{accuracy}%</div>
                <div>Exactitude</div>
            </div>
            <div class="metric-card">
                <div style="font-size: 1.5rem; color: #4361ee;">{precision}%</div>
                <div>Pr√©cision</div>
            </div>
            <div class="metric-card">
                <div style="font-size: 1.5rem; color: #4361ee;">{recall}%</div>
                <div>Rappel</div>
            </div>
            <div class="metric-card">
                <div style="font-size: 1.5rem; color: #4361ee;">{auc}</div>
                <div>AUC-ROC</div>
            </div>
        </div>
        <p>Coefficients standardis√©s du mod√®le :</p>
        <div class="code-block">
            Glucose: 0.42 | Age: 0.38 | BMI: 0.31
            LDL: 0.25 | Pression: 0.18 | Ant√©c√©dents: 0.15
        </div>
        <h3 class="doc-header" style="margin-top: 1.5rem;">Limites</h3>
        <div class="doc-item">1. Sensible aux d√©s√©quilibres de classes</div>
        <div class="doc-item">2. Suppose une relation lin√©aire entre les caract√©ristiques et le log-odds</div>
        <div class="doc-item">3. N√©cessite un seuillage optimal pour la classification</div>
    </div>
    """.format(
        accuracy="88.5",
        precision="86.2",
        recall="90.1",
        auc="0.927"
    ), unsafe_allow_html=True)
    # Section 4 - Format CSV (CORRIG√âE)
    with st.expander("üìÅ Format du fichier CSV", expanded=False):
        st.markdown("""
        <div class="doc-section">
            <h3 class="doc-header">Structure requise</h3>
            <p>Le fichier CSV doit contenir exactement les colonnes suivantes (l'ordre est important) :</p>
            <div class="code-block">
                Age,Pregnancies,BMI,Glucose,BloodPressure,LDL,HDL,Triglycerides,WHR,FamilyHistory,MedicationUse
            </div>
            <h3 class="doc-header" style="margin-top: 1.5rem;">Exemple de donn√©es valides</h3>
            <div class="code-block">
                Age,Pregnancies,BMI,Glucose,BloodPressure,LDL,HDL,Triglycerides,WHR,FamilyHistory,MedicationUse
                32,0,26.5,92,72,110,55,120,0.78,0,0
                45,2,28.7,115,85,135,42,180,0.85,1,0
                61,0,31.2,142,92,158,38,240,0.91,1,1
            </div>
            <h3 class="doc-header" style="margin-top: 1.5rem;">Recommandations</h3>
            <div class="doc-item">‚Ä¢ Utiliser des valeurs num√©riques uniquement</div>
            <div class="doc-item">‚Ä¢ Pas de valeurs manquantes (remplacer par 0 si n√©cessaire)</div>
            <div class="doc-item">‚Ä¢ Encodage UTF-8 recommand√©</div>
            <div class="doc-item">‚Ä¢ S√©parateur: virgule (,)</div>
        </div>
        """, unsafe_allow_html=True)
        
        # Exemple CSV t√©l√©chargeable
        csv_example = """Age,Pregnancies,BMI,Glucose,BloodPressure,LDL,HDL,Triglycerides,WHR,FamilyHistory,MedicationUse
32,0,26.5,92,72,110,55,120,0.78,0,0
45,2,28.7,115,85,135,42,180,0.85,1,0
61,0,31.2,142,92,158,38,240,0.91,1,1"""
        

def show_about_page() -> None:
    """Affiche la page √Ä propos"""
    st.markdown("""
        <div style="text-align: center; margin-bottom: 2rem;">
            <h1>√Ä propos de Prediction Diabete</h1>
            <p style="font-size: 1.2rem;">Solution avanc√©e de pr√©diction du risque diab√©tique</p>
        </div>
    """, unsafe_allow_html=True)
    
    cols = st.columns([1, 2])
    
    with cols[0]:
       
        st.markdown(f"""
        <div style="text-align: center;">
            <div style="margin-bottom: 1rem;">
            <img src="data:image/png;base64,{base64.b64encode(open('assets/page.jpg', 'rb').read()).decode()}" 
                 alt="Logo" 
                 style="height: 8rem; 
                    width: 8rem;
                    border-radius: 50%;
                    object-fit: cover;
                    border: 3px solid #f0f2f6;">
            </div>
            <h3>Version 1 </h3>
            <p>Derni√®re mise √† jour : 16/05/2025</p>
        </div>
        """, unsafe_allow_html=True)
    
    with cols[1]:
        st.markdown("""
            ### Notre mission
            
            Prediction Diabete a √©t√© d√©velopp√© pour aider les professionnels de sant√© √† identifier 
            pr√©cocement les patients √† risque de d√©velopper un diab√®te, permettant une intervention 
            pr√©ventive plus efficace.
            
            ### Fonctionnalit√©s cl√©s
            
            - Pr√©diction individuelle du risque diab√©tique  
            - Analyse group√©e de populations  
            - Historique complet des analyses  
            - Recommandations personnalis√©es  
            - Interface professionnelle et intuitive  
            
            ### √âquipe
            
           Developper par deux etudiantes en deuxi√®me ann√©e d'informatique Decisionnelle et statistique √† Ecole Superieur de Technologie :
           -AYA MOUNSSIF .
           -SALMA MECHAL.
            
            ### Contact
            
            üìß contact@diabepredict.com  
            üåê www.diabepredict.com  
            üìû +33 1 23 45 67 89  
        """)
    
    st.markdown("---")
    st.markdown("""
        <div style="text-align: center; color: #718096; font-size: 0.9rem;">
            <p>¬© 2025 Prediction Diab√®te - Tous droits r√©serv√©s</p>
            <p>Ce logiciel est destin√© aux professionnels de sant√© et ne remplace pas un diagnostic m√©dical.</p>
        </div>
    """, unsafe_allow_html=True)

# ============================================
# GESTION DE L'APPLICATION
# ============================================

def main() -> None:
    """Fonction principale de l'application"""
    
    # Configuration du style
    set_custom_style()
    
    # Gestion de l'authentification
    if 'authenticated' not in st.session_state or not st.session_state['authenticated']:
        show_auth_page()
        return
    
    # Navigation
    show_sidebar_navigation()
    
    # Affichage de la page courante
    current_page = st.session_state.get('current_page', 'Accueil')
    
    if current_page == "Accueil":
        show_home_page()
    elif current_page == "Pr√©diction":
        show_prediction_page()
    elif current_page == "Historique":
        show_history_page()
    elif current_page == "Documentation":
        show_documentation_page()
    elif current_page == "√Ä propos":
        show_about_page()

if __name__ == "__main__":
    main()